@page "/tab"
@using Microsoft.Extensions.Configuration
@using System.IO
@inject NavigationManager MyNavigationManager
@inject IConfiguration Configuration
@inject IJSRuntime jsRuntime

<div class="welcome page">
	<div class="narrow page-padding">
		<!--
		<h1 class="center">
			Create Accessible Screen Sharing Session
			Welcome(!String.IsNullOrEmpty(UserName) ? ", " + UserName : "")!
		</h1> -->
		
		<div class="sections">
		@if(!IsLoading)
		{
			<p>Create Accessible Screen Sharing Session</p>
			//<p>
			//	Click below to generate a Presenter link, and open VocalScreen Windows Client App behind the scenes.
			//</p>
			//<FluentButton Appearance="Appearance.Accent" @onclick="Get">Get VocalScreen</FluentButton>
			<NavLinkFluentAnchor Href="https://microsoft.com" Appearance="Appearance.Accent" target="_blank">Microsoft.com</NavLinkFluentAnchor>
			<NavLinkFluentAnchor Href="ms-calculator://" Appearance="Appearance.Accent">Launch Calculator</NavLinkFluentAnchor>

			@if(!String.IsNullOrEmpty(Uri))
			{
				<!-- <div class="profile"> -->
					<!-- <img class="avatar" src="@Uri"/> -->

					<div class="info">
						<h3>@UserName</h3>
						<p>@Title</p>
					</div>

				<!-- </div> -->
			}
		}
		else if(IsLoading)
		{
			<FluentProgressRing class="center"/>
		}
		</div>

	</div>
</div>



@code {
	TeamsFx teamsfx;
	string _clientId, _endpoint;

	public string UserName { get; set; }
	public string Title { get; set; }
	public string Uri { get; set; }
	public bool IsLoading { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		try
		{
			if (firstRender)
			{
				teamsfx = await TeamsFx.CreateTeamsFx(jsRuntime);
			    _clientId = Configuration.GetValue<string>("CLIENT_ID");
			    _endpoint = MyNavigationManager.BaseUri;

			    await teamsfx.Init(_clientId, _endpoint, _endpoint);

			    var user = await teamsfx.GetInfoAsync();

			    UserName = user.DisplayName;

			    StateHasChanged();
			}
		}
		catch (Exception) { }	
	}

	/*
	private async Task Get()
	{
		try
		{
			IsLoading = true;
			
			//var graphClient = teamsfx.GetGraphServiceClient();
			//var photoStream = await graphClient.Me.Photo.Content.Request().GetAsync();
			//var profile = await graphClient.Me.Request().GetAsync();
			
			//if(photoStream != null)
			//{
				// Copy the photo stream to a memory stream to get the bytes out of it
				//var memoryStream = new MemoryStream();
				//photoStream.CopyTo(memoryStream);
				//var photoBytes = memoryStream.ToArray();

				// Generate a data URI for the photo
				//Uri = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
			//}
			
			//Title = profile.JobTitle;

		}
		finally
		{
			IsLoading = false;
		}		
	}
	*/
}
